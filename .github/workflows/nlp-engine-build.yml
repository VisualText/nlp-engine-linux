name: Update NLP Engine Files

on:
  workflow_dispatch:
  repository_dispatch:
    types: [nlp-engine-release]

jobs:
  update-files:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout this repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history to properly check tags

    - name: Get latest release info from VisualText/nlp-engine
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
            try {
              // Get tag from input or repository dispatch
              let tagName = null;
              
              // Check for repository dispatch first
              if (context.payload.client_payload && context.payload.client_payload.tag_name) {
                tagName = context.payload.client_payload.tag_name;
                console.log(`Using tag from repository dispatch: ${tagName}`);
              } else if (context.payload.inputs && context.payload.inputs.tag_name) {
                tagName = context.payload.inputs.tag_name;
                console.log(`Using provided tag: ${tagName}`);
              } else {
                // Fall back to latest release
                const latestRelease = await github.rest.repos.getLatestRelease({
                  owner: 'VisualText',
                  repo: 'nlp-engine'
                });
                tagName = latestRelease.data.tag_name;
                console.log(`Using latest release tag: ${tagName}`);
              }
              
              core.setOutput('tag_name', tagName);
              
              // Get release by tag
              const releaseByTag = await github.rest.repos.getReleaseByTag({
                owner: 'VisualText',
                repo: 'nlp-engine',
                tag: tagName
              });
              
              // Log all assets to help debugging
              console.log("Available assets in the release:");
              releaseByTag.data.assets.forEach(asset => {
                console.log(`- ${asset.name} (${asset.browser_download_url})`);
              });
              
              // Safe find function that doesn't throw on undefined
              const safeFindAsset = (pattern) => {
                const asset = releaseByTag.data.assets.find(asset => 
                  asset.name.includes(pattern) || asset.name.endsWith(pattern)
                );
                if (!asset) {
                  console.log(`WARNING: Could not find asset matching pattern: ${pattern}`);
                  return { browser_download_url: null };
                }
                return asset;
              };
              
              // Find all Ubuntu zip files and nlpengine.zip
              const ubuntu2004Zip = safeFindAsset('ubuntu-20.04.zip');
              core.setOutput('ubuntu2004Zip', ubuntu2004Zip.browser_download_url);
              
              const ubuntu2204Zip = safeFindAsset('ubuntu-22.04.zip');
              core.setOutput('ubuntu2204Zip', ubuntu2204Zip.browser_download_url);
              
              const ubuntuLatestZip = safeFindAsset('ubuntu-latest.zip');
              core.setOutput('ubuntuLatestZip', ubuntuLatestZip.browser_download_url);
              
              const engineZip = safeFindAsset('nlpengine.zip');
              core.setOutput('engineZip', engineZip.browser_download_url);
            } catch (error) {
              console.log('Error occurred:');
              console.log(error);
              core.setFailed(`Error fetching release data: ${error.message}`);
            }  

    - name: Show latest release version
      run: echo "Latest release version is ${{ steps.get_release.outputs.tag_name }}"

    - name: Check if update is needed
      id: check_tag
      run: |
        # Print event name for debugging
        echo "Current event name: ${{ github.event_name }}"
        
        # Always update if workflow_dispatch was manually triggered
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Workflow manually triggered, forcing update"
          echo "update_needed=true" >> $GITHUB_OUTPUT
        elif git tag -l "${{ steps.get_release.outputs.tag_name }}" | grep -q .; then
          echo "Tag ${{ steps.get_release.outputs.tag_name }} already exists in this repo"
          echo "update_needed=false" >> $GITHUB_OUTPUT
        else
          echo "Tag ${{ steps.get_release.outputs.tag_name }} does not exist, update needed"
          echo "update_needed=true" >> $GITHUB_OUTPUT
        fi
        
        # Show all existing tags for debugging
        echo "Existing tags:"
        git tag -l
        
        # Print the decision for clarity
        echo "DECISION: update_needed=${{ steps.check_tag.outputs.update_needed || 'true' }}"

    - name: Download release assets to release-assets directory
      if: steps.check_tag.outputs.update_needed == 'true'
      run: |
        mkdir -p release-assets
        
        # Download all Ubuntu zip files and nlpengine.zip
        wget "${{ steps.get_release.outputs.ubuntu2004Zip }}" -P release-assets
        wget "${{ steps.get_release.outputs.ubuntu2204Zip }}" -P release-assets
        wget "${{ steps.get_release.outputs.ubuntuLatestZip }}" -P release-assets
        wget "${{ steps.get_release.outputs.engineZip }}" -P release-assets
      shell: bash

    - name: Extract files
      if: steps.check_tag.outputs.update_needed == 'true'
      run: |
        # Extract all zip files
        unzip -o release-assets/ubuntu-20.04.zip -d ./
        unzip -o release-assets/ubuntu-22.04.zip -d ./
        unzip -o release-assets/ubuntu-latest.zip -d ./
        unzip -o release-assets/nlpengine.zip -d ./
        
        # List files for debugging
        echo "Files extracted:"
        ls -la
        echo "Ubuntu 20.04 files:"
        ls -la ubuntu-20.04 || echo "ubuntu-20.04 directory not found"
        echo "Ubuntu 22.04 files:"
        ls -la ubuntu-22.04 || echo "ubuntu-22.04 directory not found"
        echo "Ubuntu latest files:"
        ls -la ubuntu-latest || echo "ubuntu-latest directory not found"

    - name: Debug before copy
      if: steps.check_tag.outputs.update_needed == 'true'
      run: |
        echo "Current files in repository:"
        ls -la

    # Force remove binary files using git rm
    - name: Force remove all binary files
      if: steps.check_tag.outputs.update_needed == 'true'
      run: |
        # Configure git for commits
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Force remove binary files and directories
        echo "Removing binary files using git rm to ensure they're properly tracked..."
        git rm -rf --ignore-unmatch *.a nlp.exe ubuntu-20.04 ubuntu-22.04 ubuntu-latest data || true
        git rm -f .version-flag || true
        
        # Commit the removal
        git commit -m "Remove binary files before update to ${{ steps.get_release.outputs.tag_name }}" || echo "Nothing to commit - files may not exist yet"
        git push || echo "Nothing to push"
        
        # Verify files were removed
        echo "Current files after removal:"
        ls -la

    - name: Configure Git
      if: steps.check_tag.outputs.update_needed == 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Force git to see all files as changed
        echo "Setting git config to force detects changes in binary files"
        git config --global core.fileMode true

    - name: Add and check for changes
      if: steps.check_tag.outputs.update_needed == 'true'
      id: check_changes
      run: |
        # List all files for debugging
        echo "Current files in repository (after extraction):"
        ls -la
        
        # Create a version flag file to force change detection
        date > .version-flag
        echo "${{ steps.get_release.outputs.tag_name }}" >> .version-flag
        
        # Add all changes to staging
        git add -A
        
        # Show git status for debugging
        echo "Git status after git add -A:"
        git status
        
        # Check for staged changes
        if git diff --staged --quiet; then
          echo "No changes detected in files"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in files"
          git diff --staged --name-status
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
        # Print the decision for clarity
        echo "DECISION: has_changes=${{ steps.check_changes.outputs.has_changes || 'false' }}"
        
        # Force has_changes to true when workflow_dispatch
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Workflow manually triggered, forcing has_changes=true"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Force update tag if it exists
      if: steps.check_tag.outputs.update_needed == 'true' && (steps.check_changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch')
      run: |
        if git tag -l "${{ steps.get_release.outputs.tag_name }}" | grep -q .; then
          echo "Removing existing tag ${{ steps.get_release.outputs.tag_name }}"
          git tag -d ${{ steps.get_release.outputs.tag_name }}
          git push origin :refs/tags/${{ steps.get_release.outputs.tag_name }} || true
        fi

    - name: Commit and push changes
      if: steps.check_tag.outputs.update_needed == 'true' && (steps.check_changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch')
      run: |        
        git commit -m "Update NLP Engine files to latest release ${{ steps.get_release.outputs.tag_name }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Tag this repository with the latest release version
      if: steps.check_tag.outputs.update_needed == 'true' && (steps.check_changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch')
      run: |
        git tag ${{ steps.get_release.outputs.tag_name }}
        git push origin ${{ steps.get_release.outputs.tag_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create a release for this repository
      if: steps.check_tag.outputs.update_needed == 'true' && (steps.check_changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_release.outputs.tag_name }}
        name: Release ${{ steps.get_release.outputs.tag_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Report no changes
      if: steps.check_tag.outputs.update_needed == 'true' && steps.check_changes.outputs.has_changes != 'true' && github.event_name != 'workflow_dispatch'
      run: |
        echo "No changes were detected. Repository already has the latest files from release ${{ steps.get_release.outputs.tag_name }}"
        
    - name: Report no update needed
      if: steps.check_tag.outputs.update_needed != 'true' && github.event_name != 'workflow_dispatch'
      run: |
        echo "No update needed. Repository is already at version ${{ steps.get_release.outputs.tag_name }}"